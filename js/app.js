/*f칬rst kollar jag hur datat fr친n API:n ser ut, anv칛nder await f칬r att ...
await fetch("https://www.themealdb.com/api/json/v1/1/search.php?f=a" )
  .then(res => res. json())
  .then(data => console.log(data));
*/
/* sedan h칛mtar jag och consoleloggar alla meals i datan
fetch("https://www.themealdb.com/api/json/v1/1/search.php?f=a")
  .then(res => res.json())
  .then(data => {
    if (!data.meals) { //om inget objekt (korrekt term?) som heter meals hittas i datan, skriv ut nedanst친ende
      console.log("Inga r칛tter hittades.");
      return;
    } else {
    console.log(data.meals);
    }
  })
  .catch(err => console.error("Fel vid h칛mtning:", err));
*/

/*eftersom API:n enbart ger m친ltider som b칬rjar p친 bokstaven "a"
kan jag plocka fram m친ltiderna p친 nedanst친ende vis */

/*
fetch("https://www.themealdb.com/api/json/v1/1/search.php?f=a")
  .then(res => res.json())
  .then(data => {
    if (!data.meals) { //om inget objekt (korrekt term?) som heter meals hittas i datan, skriv ut nedanst친ende
      console.log("Inga r칛tter hittades.");
      return;
    } else {
      data.meals.forEach(meal => console.log(meal.strMeal));
    }
  })
  .catch(err => console.error("Fel vid h칛mtning:", err));
*/
/*men eftersom det bara 칛r totalt fem m친ltider vill jag ut칬ka s칬kningen
s친 att m친ltider p친 alla bokst칛ver h칛mtas och f칬r det beh칬ver jag plocka in resultat
fr친n lika m친nga url:er som alfabetet, d칛rf칬r skapar jag en funktion*/

/*h칛r g칬r jag jobbet men skriver f칬rst ut alla r칛tter i bokstavsordning och sedan de fem f칬rsta, men inom funktionen i en if-sats

const allMeals = []; //skapar en variabel/en tom lista som ska fyllas p친 med alla r칛tter oavsett f칬rsta bokstav
const letters = "abcdefghijklmnopqrstuvwxyz".split("");

async function fetchAllaRatter() {
  for (const letter of letters) {
    const res = await fetch(`https://www.themealdb.com/api/json/v1/1/search.php?f=${letter}`);
    const data = await res.json();
    if (data.meals) {
      allMeals.push(...data.meals);
    }
  }
  allMeals.forEach(meal => console.log(meal.strMeal));
  allMeals.sort((a, b) => a.strMeal.localeCompare(b.strMeal));
  const forstaFem = allMeals.slice(0, 5);
  forstaFem.forEach(meal => console.log(meal.strMeal));
}

fetchAllaRatter();
*/

const letters = "abcdefghijklmnopqrstuvwxyz".split("");

// Funktion som h칛mtar alla r칛tter
async function fetchAllaRatter() {
  const allMeals = []; // flyttad in h칛r f칬r att h친lla det rent
  for (const letter of letters) {
    const res = await fetch(`https://www.themealdb.com/api/json/v1/1/search.php?f=${letter}`);
    const data = await res.json();
    if (data.meals) {
      allMeals.push(...data.meals);
    }
  }
  return allMeals; // 游녣 returnerar listan med alla r칛tter
}

// Anropa funktionen och hantera resultaten utanf칬r
fetchAllaRatter().then(allMeals => {
  console.log("Det h칛r 칛r alla r칛tter:");
  allMeals.forEach(meal => console.log(meal.strMeal));

  console.log("\nDet h칛r 칛r de fem f칬rsta r칛tterna i bokstavsordning:");
  const sorterade = allMeals.sort((a, b) => a.strMeal.localeCompare(b.strMeal));
  const forstaFem = sorterade.slice(0, 5);
  forstaFem.forEach(meal => console.log(meal.strMeal));
});
